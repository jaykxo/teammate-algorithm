name: Auto Assign, Close or Merge PR

on:
  pull_request:
    branches:
      - main
    types:
      - opened
  pull_request_review:
    types:
      - submitted

jobs:
  manage-pr:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ 조직 멤버 가져와서 랜덤 리뷰어 2명 지정
      - name: Assign 2 random reviewers
        id: assign
        uses: actions/github-script@v7
        with:
          script: |
            const org = context.repo.owner;
            const token = process.env.ORG_ACCESS_TOKEN;
            const octokit = github.getOctokit(token);

            let members = [];
            let page = 1;
            while(true){
              const { data } = await octokit.rest.orgs.listMembers({
                org,
                per_page: 100,
                page
              });
              if(data.length === 0) break;
              members = members.concat(data.map(u => u.login));
              page++;
            }

            const shuffled = members.sort(() => 0.5 - Math.random());
            const reviewers = shuffled.slice(0,2);

            await octokit.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers
            });

            return reviewers;
        env:
          ORG_ACCESS_TOKEN: ${{ secrets.ORG_ACCESS_TOKEN }}

      # 2️⃣ 리뷰 제출 시 감지
      - name: Check reviews and act
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.pull_request.number;
            const reviewers = steps.assign.outputs.result.split(",");

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            // 지정된 리뷰어 상태 확인
            const reviewMap = {};
            reviewers.forEach(r => reviewMap[r] = null);

            reviews.forEach(r => {
              if(reviewMap.hasOwnProperty(r.user.login)) {
                reviewMap[r.user.login] = r.state;
              }
            });

            // 누군가 변경 요청 시 PR 자동 Close
            if(Object.values(reviewMap).includes("CHANGES_REQUESTED")){
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: `⚠️ PR 자동 반려: 지정된 리뷰어 중 누군가 변경 요청을 했습니다.`
              });
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                state: "closed"
              });
              console.log("PR closed due to changes requested.");
              return;
            }

            // 모든 리뷰어가 Approve 했으면 자동 Merge
            const allApproved = Object.values(reviewMap).every(s => s === "APPROVED");
            if(allApproved){
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });
              console.log("PR auto merged.");
            } else {
              console.log("Waiting for all reviewers to approve.");
            }
