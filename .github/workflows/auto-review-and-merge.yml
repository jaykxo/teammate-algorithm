name: Auto Assign, Close or Merge PR

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
  pull_request_review:
    types:
      - submitted

jobs:
  manage-pr:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ PR 열릴 때 랜덤 리뷰어 2명 지정
      - name: Assign 2 random reviewers
        id: assign
        uses: actions/github-script@v7
        with:
          script: |
            const org = context.repo.owner;
            let members = [];
            let page = 1;

            // 조직 멤버 가져오기
            while(true){
              const { data } = await github.rest.orgs.listMembers({
                org,
                per_page: 100,
                page
              });
              if(data.length === 0) break;
              members = members.concat(data.map(u => u.login));
              page++;
            }

            // PR 작성자 제외
            const author = context.payload.pull_request.user.login;
            members = members.filter(u => u !== author);

            // 랜덤 2명 선택
            const shuffled = members.sort(() => 0.5 - Math.random());
            const reviewers = shuffled.slice(0, 2);

            // 리뷰어 지정
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: reviewers
            });

            console.log("Assigned reviewers:", reviewers);
            return reviewers.join(',');
          github-token: ${{ secrets.ORG_ACCESS_TOKEN }}

      # 2️⃣ 리뷰 제출 감지 후 Close / Merge 처리 (리뷰어 2명 모두 승인해야 merge)
      - name: Check review and act
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.pull_request.number;

            // 여러 명이 할당되어 있으므로 배열로 처리
            const reviewers = steps.assign.outputs.result.split(',');

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            // 각 리뷰어의 마지막 리뷰 상태 추적
            const reviewStates = {};
            reviewers.forEach(reviewer => {
              // 해당 리뷰어의 마지막 리뷰 찾기
              const userReviews = reviews.filter(r => r.user.login === reviewer);
              if (userReviews.length > 0) {
                reviewStates[reviewer] = userReviews[userReviews.length - 1].state;
              }
            });

            console.log("Review states:", reviewStates);

            // CHANGES_REQUESTED가 하나라도 있으면 PR Close
            if (Object.values(reviewStates).includes("CHANGES_REQUESTED")) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: `⚠️ PR 자동 반려: 리뷰어 중 한 명 이상이 변경 요청했습니다.`
              });
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                state: "closed"
              });
              console.log("PR closed due to changes requested.");
              return;
            }

            // 2명 모두 APPROVED면 자동 Merge
            if (reviewers.every(reviewer => reviewStates[reviewer] === "APPROVED")) {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });
              console.log("PR auto merged.");
            } else {
              console.log("Waiting for all reviewers to approve.");
            }
          github-token: ${{ secrets.ORG_ACCESS_TOKEN }}
